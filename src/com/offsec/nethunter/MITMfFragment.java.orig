package com.offsec.nethunter;

import android.content.Intent;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.offsec.nethunter.databinding.MitmfGeneralBinding;
import com.offsec.nethunter.databinding.MitmfInjectBinding;
import com.offsec.nethunter.databinding.MitmfResponderBinding;
import com.offsec.nethunter.databinding.MitmfSpoofBinding;
import com.offsec.nethunter.utils.NhPaths;
import com.offsec.nethunter.utils.ShellExecuter;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class MITMfFragment extends Fragment {


    View.OnClickListener checkBoxListener;
    private TabsPagerAdapter tabsPagerAdapter;

    public interface CommandProvider {
        void getCommands(StringBuilder stringBuilder);
    }
    
    // ^^ \\
    // static String commandComposed = "";
    private static final ArrayList<String> commandComposed = new ArrayList<>();

    /* All MITMf Provider Command Variables */

    String M_Responder; // --responder
    String M_Responder_Analyze; // --analyze
    String M_Responder_Fingerprint; // --fingerprint
    String M_Responder_Downgrade; // --lm
    String M_Responder_NBTNS; // --nbtns
    String M_Responder_WPAD; // --wpad
    String M_Responder_WRedir; // --wredir


    private static NhPaths nh;

    private static final String ARG_SECTION_NUMBER = "section_number";

    public MITMfFragment() {
    }


    public static MITMfFragment newInstance(int sectionNumber) {
        MITMfFragment fragment = new MITMfFragment();
        Bundle args = new Bundle();
        args.putInt(ARG_SECTION_NUMBER, sectionNumber);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        cleanCmd();
        View rootView = inflater.inflate(R.layout.mitmf, container, false);
        tabsPagerAdapter = new TabsPagerAdapter(getActivity().getSupportFragmentManager());

        ViewPager mViewPager = (ViewPager) rootView.findViewById(R.id.pagerMITMF);
        mViewPager.setAdapter(tabsPagerAdapter);

        nh = new NhPaths();

        mViewPager.addOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
            @Override
            public void onPageSelected(int position) {
                getActivity().invalidateOptionsMenu();
            }
        });
        setHasOptionsMenu(true);
<<<<<<< HEAD
=======

>>>>>>> wardriving-map
        return rootView;
    }

    /* Start execution menu */
    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        inflater.inflate(R.menu.mitmf, menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.mitmf_menu_start_service:
                start();
                return true;
            case R.id.mitmf_menu_stop_service:
                stop();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    private void start() {
        StringBuilder sb = new StringBuilder();
        List<CommandProvider> commandProviders = tabsPagerAdapter.getCommandProviders();
        for (CommandProvider provider : commandProviders) {
            provider.getCommands(sb);
        }

        intentClickListener_NH("mitmf " + sb.toString());
        nh.showMessage("MITMf Started!");
    }

    private void stop() {
        ShellExecuter exe = new ShellExecuter();
        String[] command = new String[1];
        exe.RunAsRoot(command);
        nh.showMessage("MITMf Stopped!");
    }
    /* Stop execution menu */

    //public static class TabsPagerAdapter extends FragmentPagerAdapter {
    private static class TabsPagerAdapter extends FragmentPagerAdapter {

        private List<CommandProvider> commandProviders = new ArrayList<>(5);

        TabsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int i) {
            switch (i) {
                case 0:
                    MITMfGeneral fragment = new MITMfGeneral();
                    addCommandProvider(fragment);
                    return fragment;
                case 1:
                    MITMfResponder responder = new MITMfResponder();
                    addCommandProvider(responder);
                    return responder;
                case 2:
                    MITMfInject fragment2 = new MITMfInject();
                    addCommandProvider(fragment2);
                    return fragment2;
                case 3:
                    MITMfSpoof spoofFragment = new MITMfSpoof();
                    addCommandProvider(spoofFragment);
                    return spoofFragment;
                case 4:
                    return new MITMfConfigFragment();
                default:
                    return null;
            }
        }

        private void addCommandProvider(CommandProvider fragment) {
            if (!commandProviders.contains(fragment)) {
                commandProviders.add(fragment);
            }
        }

        public List<CommandProvider> getCommandProviders() {
            return commandProviders;
        }

        @Override
        public Parcelable saveState() {
            return null;
        }

        @Override
        public int getCount() {
            return 5;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            switch (position) {
                case 1:
                    return "Provider Settings";
                case 2:
                    return "Inject Settings";
                case 3:
                    return "Spoof Settings";
                case 4:
                    return "MITMf Configuration";
                default:
                    return "General Settings";
            }
        }
    }
    /* Stop Tabs */

<<<<<<< HEAD
    public static class MITMfGeneral extends MITMfFragment  {
=======
    public static class MITMfGeneral extends Fragment implements CommandProvider {

        private ArrayAdapter<CharSequence> interfaceAdapter;
        private int interfaceSelection;


        MitmfGeneralBinding generalBinding;
        MITMFViewModel mViewModel;

>>>>>>> wardriving-map

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            generalBinding = MitmfGeneralBinding.inflate(inflater, container, false);
            mViewModel = new MITMFViewModel();
            generalBinding.setViewModel(mViewModel);

            // Optional Presets Spinner
            Spinner interfaceSpinner = generalBinding.mitmfInterface;
            interfaceAdapter = ArrayAdapter.createFromResource(getActivity(),
                    R.array.mitmf_interface_array, android.R.layout.simple_spinner_item);
            interfaceAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
            interfaceSpinner.setAdapter(interfaceAdapter);
            interfaceSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                @Override
                public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
<<<<<<< HEAD
                    switch (pos) {
                        case 0:
                            // Interface: wlan0
                            removeFromCmd(M_Interface);
                            M_Interface = " -i wlan0";
                            addToCmd(M_Interface);
                            break;
                        case 1:
                            // Interface: wlan1
                            removeFromCmd(M_Interface);
                            M_Interface = " -i wlan1";
                            addToCmd(M_Interface);
                            break;
                        case 2:
                            // Interface: eth0
                            removeFromCmd(M_Interface);
                            M_Interface = " -i eth0";
                            addToCmd(M_Interface);
                            break;
                        case 3:
                            // Interface: rndis0
                            removeFromCmd(M_Interface);
                            M_Interface = " -i rndis0";
                            addToCmd(M_Interface);
                            break;
                        case 4:
                            // Interface: usb0
                            removeFromCmd(M_Interface);
                            M_Interface = " -i usb0";
                            addToCmd(M_Interface);
                            break;
                    }
=======
                    MITMfGeneral.this.interfaceSelection = pos;
>>>>>>> wardriving-map
                }

                @Override
                public void onNothingSelected(AdapterView<?> parent) {
                    MITMfGeneral.this.interfaceSelection = 0;
                }
            });

<<<<<<< HEAD
            // Checkbox for JSKeyLogger Checkbox
            ((CheckBox) rootView.findViewById(R.id.mitmf_jskey))
                    .setOnCheckedChangeListener(new ManaClickListener(" --jskeylogger"));

            // Checkbox for FerretNG Checkbox
            ((CheckBox) rootView.findViewById(R.id.mitmf_ferretng))
                    .setOnCheckedChangeListener(new ManaClickListener(" --ferretng"));

            // Checkbox for BrowserProfiler Checkbox
            ((CheckBox) rootView.findViewById(R.id.mitmf_browserprofile))
                    .setOnCheckedChangeListener(new ManaClickListener(" --browserprofiler"));

            // Checkbox for FilePWN Checkbox
            ((CheckBox) rootView.findViewById(R.id.mitmf_filepwn))
                    .setOnCheckedChangeListener(new ManaClickListener(" --filepwn"));

            // Checkbox for BeeF AutoRUN Checkbox
            ((CheckBox) rootView.findViewById(R.id.mitmf_beef))
                    .setOnCheckedChangeListener(new ManaClickListener(" --beefauto"));

            // Checkbox for SMB Checkbox
            ((CheckBox) rootView.findViewById(R.id.mitmf_smb))
                    .setOnCheckedChangeListener(new ManaClickListener(" --smbauth"));

            // Checkbox for SSLStrip
            ((CheckBox) rootView.findViewById(R.id.mitmf_sslstrip))
                    .setOnCheckedChangeListener(new ManaClickListener(" --hsts"));

            // Checkbox for App Cache Poison
            ((CheckBox) rootView.findViewById(R.id.mitmf_app_poison))
                    .setOnCheckedChangeListener(new ManaClickListener(" --appoison"));

            // Checkbox for UpsideDownInternet
            ((CheckBox) rootView.findViewById(R.id.mitmf_upsidedown))
                    .setOnCheckedChangeListener(new ManaClickListener(" --upsidedowninternet"));

=======
>>>>>>> wardriving-map
            // ScreenShotter Interval Time
            generalBinding.mitmfScreenInterval.setText("10");

<<<<<<< HEAD
                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void afterTextChanged(Editable s) {
                    if (ScreenShotterCheckbox.isChecked()) {
                        removeFromCmd(M_ScreenShotter);
                        SCREENTIMEtext = M_ScreenIntervalTime.getText().toString(); // Get [num]
                        M_ScreenShotter = " --screen --interval " + SCREENTIMEtext;
                        addToCmd(M_ScreenShotter);
                    }
                }
            });


            // Checkbox for ScreenShotter
            ScreenShotterCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_screenshotter);
            checkBoxListener =new View.OnClickListener() {
                public void onClick(View v) {
                    if(ScreenShotterCheckbox.isChecked()) {
                        M_ScreenShotter = " --screen --interval " + SCREENTIMEtext;
                        addToCmd(M_ScreenShotter);
                        M_ScreenIntervalTime.setFocusableInTouchMode(true);
                        M_ScreenIntervalTime.setFocusable(true);
                        M_ScreenIntervalTime.setEnabled(true);
                    } else {
                        removeFromCmd(M_ScreenShotter);
                        removeFromCmd(M_ScreenInterval + SCREENTIMEtext);
                        M_ScreenIntervalTime.setFocusableInTouchMode(false);
                        M_ScreenIntervalTime.setFocusable(false);
                        M_ScreenIntervalTime.setEnabled(false);
                    }
                }
            };
            ScreenShotterCheckbox.setOnClickListener(checkBoxListener);


            return rootView;
        }

    }
=======
            return generalBinding.getRoot();
        }

        @Override
        public void getCommands(StringBuilder stringBuilder) {
            stringBuilder
                    .append(" -i ")
                    .append(interfaceAdapter.getItem(interfaceSelection))
                    .append(generalBinding.mitmfJskey.isChecked() ? " --jskeylogger" : "")
                    .append(generalBinding.mitmfFerretng.isChecked() ? " --ferretng" : "")
                    .append(generalBinding.mitmfBrowserprofile.isChecked() ? " --browserprofiler" : "")
                    .append(generalBinding.mitmfFilepwn.isChecked() ? " --filepwn" : "")
                    .append(generalBinding.mitmfSmb.isChecked() ? " --smbauth" : "")
                    .append(generalBinding.mitmfSmbTrap.isChecked() ? " --smbtrap" : "")
                    .append(generalBinding.mitmfSslstrip.isChecked() ? " --hsts" : "")
                    .append(generalBinding.mitmfAppPoison.isChecked() ? " --appoison" : "")
                    .append(generalBinding.mitmfUpsidedown.isChecked() ? " --upsidedownternet" : "")
                    .append(generalBinding.mitmfScreenshotter.isChecked() ?
                            " --screen --interval " + generalBinding.mitmfScreenInterval.getText().toString() :
                            "");
>>>>>>> wardriving-map

    public static class ManaClickListener implements CheckBox.OnCheckedChangeListener {
        private final String command;

        ManaClickListener(String command) {
            this.command = command;
        }
        @Override
        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            if (isChecked) {
                commandComposed.add(command);
            } else {
                commandComposed.remove(command);
            }
        }
    }

    public static class MITMfInject extends Fragment implements CommandProvider {

        MitmfInjectBinding injectBinding;
        MITMFViewModel mViewModel = new MITMFViewModel();

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
<<<<<<< HEAD
            View rootView = inflater.inflate(R.layout.mitmf_inject, container, false);

            // Checkbox for Injection Preserve Cache
            final CheckBox InjectionPreserveCacheCheckbox =
                    (CheckBox) rootView.findViewById(R.id.mitmf_inject_preservecache);
            InjectionPreserveCacheCheckbox
                    .setOnCheckedChangeListener(new ManaClickListener(" --preserve-cache"));


            // Checkbox for Injection Once Per Domain
            final CheckBox InjectionPerDomainCheckbox =
                    (CheckBox) rootView.findViewById(R.id.mitmf_inject_onceperdomain);
                    InjectionPerDomainCheckbox.setOnCheckedChangeListener(new ManaClickListener(" --per-domain"));

            // Textfield JS URL
            M_Injection_JSURL_Text = (EditText) rootView.findViewById(R.id.mitmf_injectjs_url);
            M_Injection_JSURL_Text.setEnabled(false);
            // Detect changes to TextField
            M_Injection_JSURL_Text.addTextChangedListener(new TextWatcher() {

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void afterTextChanged(Editable s)
                {
                    removeFromCmd(M_Injection_JSURL + JSURLtext);
                    M_Injection_JSURL = " --js-url ";
                    JSURLtext = M_Injection_JSURL_Text.getText().toString();
                    addToCmd(M_Injection_JSURL + JSURLtext);
                }
            });


            // Checkbox for Injection JS URL
            final CheckBox InjectionJSURLCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_injectjs);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if(InjectionJSURLCheckbox.isChecked()) {
                        M_Injection_JSURL = " --js-url ";
                        JSURLtext = M_Injection_JSURL_Text.getText().toString();
                        addToCmd(M_Injection_JSURL + JSURLtext);
                        M_Injection_JSURL_Text.setFocusableInTouchMode(true);
                        M_Injection_JSURL_Text.setFocusable(true);
                        M_Injection_JSURL_Text.setEnabled(true);
                    }else{
                        removeFromCmd(M_Injection_JSURL + JSURLtext);
                        M_Injection_JSURL_Text.setFocusableInTouchMode(false);
                        M_Injection_JSURL_Text.setFocusable(false);
                        M_Injection_JSURL_Text.setEnabled(false);

                    }
                }
            };
            InjectionJSURLCheckbox.setOnClickListener(checkBoxListener);

            // Textfield HTML URL
            M_Injection_HTMLURL_Text = (EditText) rootView.findViewById(R.id.mitmf_injecthtml_url);
            M_Injection_HTMLURL_Text.setEnabled(false);
            // Detect changes to TextField
            M_Injection_HTMLURL_Text.addTextChangedListener(new TextWatcher() {

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void afterTextChanged(Editable s)
                {
                    removeFromCmd(M_Injection_HTMLURL + HTMLURLtext);
                    M_Injection_HTMLURL = " --html-url ";
                    HTMLURLtext = M_Injection_HTMLURL_Text.getText().toString();
                    addToCmd(M_Injection_HTMLURL + HTMLURLtext);
                }
            });

            // Checkbox for Injection HTML URL
            final CheckBox InjectionHTMLURLCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_injecthtml);
            checkBoxListener =new View.OnClickListener() {
                public void onClick(View v) {
                    if(InjectionHTMLURLCheckbox.isChecked()) {
                        M_Injection_HTMLURL = " --html-url ";
                        HTMLURLtext = M_Injection_HTMLURL_Text.getText().toString();
                        addToCmd(M_Injection_HTMLURL + HTMLURLtext);
                        M_Injection_HTMLURL_Text.setFocusableInTouchMode(true);
                        M_Injection_HTMLURL_Text.setFocusable(true);
                        M_Injection_HTMLURL_Text.setEnabled(true);
                    } else {
                        removeFromCmd(M_Injection_HTMLURL + HTMLURLtext);
                        M_Injection_HTMLURL_Text.setFocusableInTouchMode(false);
                        M_Injection_HTMLURL_Text.setFocusable(false);
                        M_Injection_HTMLURL_Text.setEnabled(false);
                    }
                }
            };
            InjectionHTMLURLCheckbox.setOnClickListener(checkBoxListener);

            // Textfield HTML Payload String
            M_Injection_HTMLPAY_Text = (EditText) rootView.findViewById(R.id.mitmf_injecthtmlpay_text);
            M_Injection_HTMLPAY_Text.setEnabled(false);
            // Detect changes to TextField
            M_Injection_HTMLPAY_Text.addTextChangedListener(new TextWatcher() {

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void afterTextChanged(Editable s)
                {
                    removeFromCmd(M_Injection_HTMLPAY + HTMLPAYtext);
                    M_Injection_HTMLPAY = " --html-payload ";
                    HTMLPAYtext = M_Injection_HTMLPAY_Text.getText().toString();
                    addToCmd(M_Injection_HTMLPAY + HTMLPAYtext);
                }
            });

            // Checkbox for Injection HTML Payload String
            final CheckBox InjectionHTMLPAYCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_injecthtmlpay);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (InjectionHTMLPAYCheckbox.isChecked()) {
                        M_Injection_HTMLPAY = " --html-payload ";
                        addToCmd(M_Injection_HTMLPAY + HTMLPAYtext);
                        M_Injection_HTMLPAY_Text.setFocusableInTouchMode(true);
                        M_Injection_HTMLPAY_Text.setFocusable(true);
                        M_Injection_HTMLPAY_Text.setEnabled(true);
                    } else {
                        removeFromCmd(M_Injection_HTMLPAY + HTMLPAYtext);
                        M_Injection_HTMLPAY_Text.setFocusableInTouchMode(false);
                        M_Injection_HTMLPAY_Text.setFocusable(false);
                        M_Injection_HTMLPAY_Text.setEnabled(false);

                    }
                }
            };
            InjectionHTMLPAYCheckbox.setOnClickListener(checkBoxListener);

            // Checkbox for Injection Match HTML
            final CheckBox InjectionMatchCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_inject_match);
            checkBoxListener =new View.OnClickListener() {
                public void onClick(View v) {
                    if(InjectionMatchCheckbox.isChecked()) {
                        M_Injection_Match = " --match-str ";
                        MATCHtext = M_Injection_Match_Text.getText().toString();
                        addToCmd(M_Injection_Match + MATCHtext);
                        M_Injection_Match_Text.setFocusableInTouchMode(true);
                        M_Injection_Match_Text.setFocusable(true);
                        M_Injection_Match_Text.setEnabled(true);
                    } else {
                        removeFromCmd(M_Injection_Match + MATCHtext);
                        M_Injection_Match_Text.setFocusableInTouchMode(false);
                        M_Injection_Match_Text.setFocusable(false);
                        M_Injection_Match_Text.setEnabled(false);

                    }
                }
            };
            InjectionMatchCheckbox.setOnClickListener(checkBoxListener);

            // Textfield HTML Match String
            M_Injection_Match_Text = (EditText) rootView.findViewById(R.id.mitmf_inject_match_string);
            M_Injection_Match_Text.setEnabled(false);
            // Detect changes to TextField
            M_Injection_Match_Text.addTextChangedListener(new TextWatcher() {

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void afterTextChanged(Editable s)
                {
                    if(InjectionMatchCheckbox.isChecked()) {
                        removeFromCmd(M_Injection_Match + MATCHtext);
                        M_Injection_Match = " --match-str ";
                        MATCHtext = M_Injection_Match_Text.getText().toString();
                        addToCmd(M_Injection_Match + MATCHtext);
                    }
                }
            });

            // Textfield for Injection Rate Limit
            M_Injection_Rate_Limit_Text = (EditText) rootView.findViewById(R.id.mitmf_inject_rateseconds);
            M_Injection_Rate_Limit_Text.setEnabled(false);
            // Detect changes to TextField
            M_Injection_Rate_Limit_Text.addTextChangedListener(new TextWatcher() {

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void afterTextChanged(Editable s)
                {
                    removeFromCmd(M_Injection_Rate_Limit + RATEtext);
                    M_Injection_Rate_Limit = " --rate-limit ";
                    RATEtext = M_Injection_Rate_Limit_Text.getText().toString();
                    addToCmd(M_Injection_Rate_Limit + RATEtext);
                }
            });

            // Checkbox for Injection Rate Limit
            final CheckBox InjectionRateLimitCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_inject_ratelimit);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (InjectionRateLimitCheckbox.isChecked()) {
                        M_Injection_Rate_Limit = " --rate-limit ";
                        RATEtext = M_Injection_Rate_Limit_Text.getText().toString();
                        addToCmd(M_Injection_Rate_Limit + RATEtext);
                        M_Injection_Rate_Limit_Text.setFocusableInTouchMode(true);
                        M_Injection_Rate_Limit_Text.setFocusable(true);
                        M_Injection_Rate_Limit_Text.setEnabled(true);
                    } else {
                        removeFromCmd(M_Injection_Rate_Limit + RATEtext);
                        M_Injection_Rate_Limit_Text.setFocusableInTouchMode(false);
                        M_Injection_Rate_Limit_Text.setFocusable(false);
                        M_Injection_Rate_Limit_Text.setEnabled(false);
                    }
                }
            };
            InjectionRateLimitCheckbox.setOnClickListener(checkBoxListener);

            // Textfield for Injection Count Limit
            M_Injection_Number_Text = (EditText) rootView.findViewById(R.id.mitmf_inject_times_text);
            M_Injection_Number_Text.setEnabled(false);
            // Detect changes to TextField
            M_Injection_Number_Text.addTextChangedListener(new TextWatcher() {

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void afterTextChanged(Editable s) {
                    removeFromCmd(M_Injection_Number + NUMtext);
                    M_Injection_Number = " --count-limit ";
                    NUMtext = M_Injection_Number_Text.getText().toString();
                    addToCmd(M_Injection_Number + NUMtext);
                }
            });

            // Checkbox for Injection Count Limit
            final CheckBox InjectionNumberCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_inject_times);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (InjectionNumberCheckbox.isChecked()) {
                        M_Injection_Number = " --count-limit ";
                        NUMtext = M_Injection_Number_Text.getText().toString();
                        addToCmd(M_Injection_Number + NUMtext);
                        M_Injection_Number_Text.setFocusableInTouchMode(true);
                        M_Injection_Number_Text.setFocusable(true);
                        M_Injection_Number_Text.setEnabled(true);
                    } else {
                        removeFromCmd(M_Injection_Number + NUMtext);
                        M_Injection_Number = "";
                        M_Injection_Number_Text.setFocusableInTouchMode(false);
                        M_Injection_Number_Text.setFocusable(false);
                        M_Injection_Number_Text.setEnabled(false);
                        NUMtext = "";
                    }
                }
            };
            InjectionNumberCheckbox.setOnClickListener(checkBoxListener);

            // Textfield Inject Only IP
            M_Injection_Only_IP_Text = (EditText) rootView.findViewById(R.id.mitmf_inject_ip_text);
            M_Injection_Only_IP_Text.setEnabled(false);
            // Detect changes to TextField
            M_Injection_Only_IP_Text.addTextChangedListener(new TextWatcher() {

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void afterTextChanged(Editable s) {
                    removeFromCmd(M_Injection_Only_IP + ONLYIPtext);
                    M_Injection_Only_IP = " --white-ips ";
                    ONLYIPtext = M_Injection_Only_IP_Text.getText().toString();
                    addToCmd(M_Injection_Only_IP + ONLYIPtext);
                }
            });

            // Checkbox for Injection Only Target IP
            final CheckBox InjectionOnlyIPCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_inject_ip);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (InjectionOnlyIPCheckbox.isChecked()) {
                        M_Injection_Only_IP = " --white-ips ";
                        ONLYIPtext = M_Injection_Only_IP_Text.getText().toString();
                        addToCmd(M_Injection_Only_IP + ONLYIPtext);
                        M_Injection_Only_IP_Text.setFocusableInTouchMode(true);
                        M_Injection_Only_IP_Text.setFocusable(true);
                        M_Injection_Only_IP_Text.setEnabled(true);
                    } else {
                        removeFromCmd(M_Injection_Only_IP + ONLYIPtext);
                        M_Injection_Only_IP_Text.setFocusableInTouchMode(false);
                        M_Injection_Only_IP_Text.setFocusable(false);
                        M_Injection_Only_IP_Text.setEnabled(false);

                    }
                }
            };
            InjectionOnlyIPCheckbox.setOnClickListener(checkBoxListener);

            // Textfield Inject Not IP
            M_Injection_Not_IP_Text = (EditText) rootView.findViewById(R.id.mitmf_inject_noip_text);
            M_Injection_Not_IP_Text.setEnabled(false);
            // Detect changes to TextField
            M_Injection_Not_IP_Text.addTextChangedListener(new TextWatcher() {

                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void afterTextChanged(Editable s) {
                    removeFromCmd(M_Injection_Not_IP + NOTIPtext);
                    M_Injection_Not_IP = " --black-ips ";
                    NOTIPtext = M_Injection_Not_IP_Text.getText().toString();
                    addToCmd(M_Injection_Not_IP + NOTIPtext);
                }
            });

            // Checkbox for Injection Not IP
            final CheckBox InjectionNotIPCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_inject_noip);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (InjectionNotIPCheckbox.isChecked()) {
                        M_Injection_Not_IP = " --black-ips ";
                        NOTIPtext = M_Injection_Not_IP_Text.getText().toString();
                        addToCmd(M_Injection_Not_IP + NOTIPtext);
                        M_Injection_Not_IP_Text.setFocusableInTouchMode(true);
                        M_Injection_Not_IP_Text.setFocusable(true);
                        M_Injection_Not_IP_Text.setEnabled(true);
                    } else {
                        removeFromCmd(M_Injection_Not_IP + NOTIPtext);
                        M_Injection_Not_IP_Text.setFocusableInTouchMode(false);
                        M_Injection_Not_IP_Text.setFocusable(false);
                        M_Injection_Not_IP_Text.setEnabled(false);

                    }
                }
            };
            InjectionNotIPCheckbox.setOnClickListener(checkBoxListener);

            // Checkbox for Injection
            final CheckBox InjectionCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_enableinject);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (InjectionCheckbox.isChecked()) {
                        M_Injection = " --inject";
                        addToCmd(M_Injection);
                        /* Allow checkboxes to be enabled if Injection checkbox activated */
                        InjectionPreserveCacheCheckbox.setEnabled(true);
                        InjectionPerDomainCheckbox.setEnabled(true);
                        InjectionJSURLCheckbox.setEnabled(true);
                        InjectionHTMLURLCheckbox.setEnabled(true);
                        InjectionHTMLPAYCheckbox.setEnabled(true);
                        InjectionMatchCheckbox.setEnabled(true);
                        InjectionRateLimitCheckbox.setEnabled(true);
                        InjectionNumberCheckbox.setEnabled(true);
                        InjectionOnlyIPCheckbox.setEnabled(true);
                        InjectionNotIPCheckbox.setEnabled(true);
                    } else {
                        removeFromCmd(M_Injection);
                        removeFromCmd(M_Injection_Preserve_Cache);
                        removeFromCmd(M_Injection_Per_Domain);
                        removeFromCmd(M_Injection_JSURL + JSURLtext);
                        removeFromCmd(M_Injection_HTMLURL + HTMLURLtext);
                        removeFromCmd(M_Injection_HTMLPAY + HTMLPAYtext);
                        removeFromCmd(M_Injection_Match + MATCHtext);
                        removeFromCmd(M_Injection_Rate_Limit + RATEtext);
                        removeFromCmd(M_Injection_Number + NUMtext);
                        removeFromCmd(M_Injection_Only_IP + ONLYIPtext);
                        removeFromCmd(M_Injection_Not_IP + NOTIPtext);

                        /* Disable text fields */
                        M_Injection_Only_IP_Text.setFocusableInTouchMode(false);
                        M_Injection_Only_IP_Text.setFocusable(false);
                        M_Injection_Only_IP_Text.setEnabled(false);
                        M_Injection_Not_IP_Text.setFocusableInTouchMode(false);
                        M_Injection_Not_IP_Text.setFocusable(false);
                        M_Injection_Not_IP_Text.setEnabled(false);
                        M_Injection_Number_Text.setFocusableInTouchMode(false);
                        M_Injection_Number_Text.setFocusable(false);
                        M_Injection_Number_Text.setEnabled(false);
                        M_Injection_Rate_Limit_Text.setFocusableInTouchMode(false);
                        M_Injection_Rate_Limit_Text.setFocusable(false);
                        M_Injection_Rate_Limit_Text.setEnabled(false);
                        M_Injection_Match_Text.setFocusableInTouchMode(false);
                        M_Injection_Match_Text.setFocusable(false);
                        M_Injection_Match_Text.setEnabled(false);
                        M_Injection_HTMLPAY_Text.setFocusableInTouchMode(false);
                        M_Injection_HTMLPAY_Text.setFocusable(false);
                        M_Injection_HTMLPAY_Text.setEnabled(false);
                        M_Injection_HTMLURL_Text.setFocusableInTouchMode(false);
                        M_Injection_HTMLURL_Text.setFocusable(false);
                        M_Injection_HTMLURL_Text.setEnabled(false);
                        M_Injection_JSURL_Text.setFocusableInTouchMode(false);
                        M_Injection_JSURL_Text.setFocusable(false);
                        M_Injection_JSURL_Text.setEnabled(false);

                        /* Uncheck Checkboxes */
                        InjectionPreserveCacheCheckbox.setChecked(false);
                        InjectionPerDomainCheckbox.setChecked(false);
                        InjectionJSURLCheckbox.setChecked(false);
                        InjectionHTMLURLCheckbox.setChecked(false);
                        InjectionHTMLPAYCheckbox.setChecked(false);
                        InjectionMatchCheckbox.setChecked(false);
                        InjectionRateLimitCheckbox.setChecked(false);
                        InjectionNumberCheckbox.setChecked(false);
                        InjectionOnlyIPCheckbox.setChecked(false);
                        InjectionNotIPCheckbox.setChecked(false);

                        /* Don't allow checkboxes to be enabled if Injection checkbox not activated */
                        InjectionPreserveCacheCheckbox.setEnabled(false);
                        InjectionPerDomainCheckbox.setEnabled(false);
                        InjectionJSURLCheckbox.setEnabled(false);
                        InjectionHTMLURLCheckbox.setEnabled(false);
                        InjectionHTMLPAYCheckbox.setEnabled(false);
                        InjectionMatchCheckbox.setEnabled(false);
                        InjectionRateLimitCheckbox.setEnabled(false);
                        InjectionNumberCheckbox.setEnabled(false);
                        InjectionOnlyIPCheckbox.setEnabled(false);
                        InjectionNotIPCheckbox.setEnabled(false);
                    }
                }
            };
            InjectionCheckbox.setOnClickListener(checkBoxListener);

            /* Set Checkboxes off by default */
            InjectionPreserveCacheCheckbox.setEnabled(false);
            InjectionPerDomainCheckbox.setEnabled(false);
            InjectionJSURLCheckbox.setEnabled(false);
            InjectionHTMLURLCheckbox.setEnabled(false);
            InjectionHTMLPAYCheckbox.setEnabled(false);
            InjectionMatchCheckbox.setEnabled(false);
            InjectionRateLimitCheckbox.setEnabled(false);
            InjectionNumberCheckbox.setEnabled(false);
            InjectionOnlyIPCheckbox.setEnabled(false);
            InjectionNotIPCheckbox.setEnabled(false);

            return rootView;
=======
            injectBinding = MitmfInjectBinding.inflate(inflater, container, false);
            injectBinding.setViewModel(mViewModel);
            return injectBinding.getRoot();
>>>>>>> wardriving-map
        }


        @Override
        public void getCommands(StringBuilder stringBuilder) {
            if (injectBinding.mitmfEnableinject.isChecked()) {
                String injectRateSeconds = injectBinding.mitmfInjectRateseconds.getText().toString();
                String injectTimes = injectBinding.mitmfInjectTimesText.getText().toString();
                String injectJSURL = injectBinding.mitmfInjectjsUrl.getText().toString();
                String injectHtmlUrl = injectBinding.mitmfInjecthtmlUrl.getText().toString();
                String injectHtmlPay = injectBinding.mitmfInjecthtmlpayText.getText().toString();
                String mitmfInjectIp = injectBinding.mitmfInjectIpText.getText().toString();
                String injectNoIp = injectBinding.mitmfInjectNoipText.getText().toString();

                stringBuilder
                        .append(" --inject")
                        .append(!injectRateSeconds.isEmpty() ? " --rate-limit " + injectRateSeconds : "")
                        .append(!injectTimes.isEmpty() ? " --count-limit " + injectTimes : "")
                        .append(injectBinding.mitmfInjectPreservecache.isChecked() ? " --preserve-cache" : "")
                        .append(injectBinding.mitmfInjectOnceperdomain.isChecked() ? " --per-domain" : "")
                        .append(!injectJSURL.isEmpty() ? " --js-url " + injectJSURL : "")
                        .append(!injectHtmlUrl.isEmpty() ? " --html-url " + injectHtmlUrl : "")
                        .append(!injectHtmlPay.isEmpty() ? " --html-payload " + injectHtmlPay : "")
                        .append(!mitmfInjectIp.isEmpty() ? " --white-ips " + mitmfInjectIp : "")
                        .append(!injectNoIp.isEmpty() ? " --black-ips " + injectNoIp : "")
                ;
            }

        }
    }


    public static class MITMfSpoof extends Fragment implements CommandProvider {

        private int spoofOption;
        private ArrayAdapter<CharSequence> redirectAdapter;
        private MitmfSpoofBinding spoofBinding;
        private int arpModeOption;
        private MITMFViewModel viewModel;


        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            spoofBinding = MitmfSpoofBinding.inflate(inflater, container, false);
            viewModel = new MITMFViewModel();
            spoofBinding.setViewModel(viewModel);


            // Redirect Spinner
            final Spinner redirectSpinner = spoofBinding.mitmfSpoofRedirectspin;
            redirectAdapter = ArrayAdapter.createFromResource(getActivity(),
                    R.array.mitmf_spoof_type, android.R.layout.simple_spinner_item);
            redirectAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
            redirectSpinner.setAdapter(redirectAdapter);
            redirectSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                @Override
                public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
                    String selectedItemText = parent.getItemAtPosition(pos).toString();
                    Log.d("Selected: ", selectedItemText);
                    spoofOption = pos;
                    if (pos == 3) { /*dhcp*/
                        viewModel.setShellShockEnabled(true);
                    } else {
                        viewModel.setShellShockEnabled(false);
                    }
                }

                @Override
                public void onNothingSelected(AdapterView<?> parent) {
                    //Another interface callback
                }
            });

            // ARP Mode Spinner
            ArrayAdapter<CharSequence> arpAdapter = ArrayAdapter.createFromResource(getActivity(),
                    R.array.mitmf_spoof_arpmode, android.R.layout.simple_spinner_item);
            arpAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
            spoofBinding.mitmfSpoofArpmodespin.setAdapter(arpAdapter);
            spoofBinding.mitmfSpoofArpmodespin.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                @Override
                public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
                    String selectedItemText = parent.getItemAtPosition(pos).toString();
                    Log.d("Slected: ", selectedItemText);
                    arpModeOption = pos;
                }

                @Override
                public void onNothingSelected(AdapterView<?> parent) {
                    //Another interface callback
                }
            });


            return spoofBinding.getRoot();
        }

        @Override
        public void getCommands(StringBuilder stringBuilder) {
            if (spoofBinding.mitmfEnablespoof.isChecked() && spoofOption != 0) {
                stringBuilder.append(" --spoof");
                if (spoofOption == 1) {
                    stringBuilder.append(" --arp");
                } else if (spoofOption == 2) {
                    stringBuilder.append(" --icmp");
                } else if (spoofOption == 3) {
                    stringBuilder.append(" --dhcp");
                } else if (spoofOption == 4) {
                    stringBuilder.append(" --dns");
                }

                if (arpModeOption == 1) {
                    stringBuilder.append(" --arpmode req");
                } else if (arpModeOption == 2) {
                    stringBuilder.append(" --arpmode rep");
                }

                String gateway = spoofBinding.mitmfSpoofGatewayText.getText().toString();
                String targets = spoofBinding.mitmfSpoofTargetsText.getText().toString();
                String shellShock = spoofBinding.mitmfSpoofShellshockText.getText().toString();
                stringBuilder.append(!gateway.isEmpty() ? " --gateway " + gateway : "")
                        .append(!targets.isEmpty() ? " --targets " + targets : "")
                        .append(spoofBinding.mitmfSpoofShellshock.isChecked() &&
                                !shellShock.isEmpty() ? " --shellshock " + shellShock : "");
            }

        }
    }


    public static class MITMfResponder extends Fragment implements CommandProvider {

        private MitmfResponderBinding responderBinding;

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            responderBinding = MitmfResponderBinding.inflate(inflater, container, false);
            MITMFViewModel viewModel = new MITMFViewModel();
            responderBinding.setViewModel(viewModel);

<<<<<<< HEAD
            // Checkbox for Provider Analyze
            final CheckBox ResponderAnalyzeCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_responder_analyze);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (ResponderAnalyzeCheckbox.isChecked()) {
                        M_Responder_Analyze = " --analyze";
                        addToCmd(M_Responder_Analyze);
                    } else {
                        removeFromCmd(M_Responder_Analyze);
                    }
                }
            };
            ResponderAnalyzeCheckbox.setOnClickListener(checkBoxListener);

            // Checkbox for Provider Fingerprint
            final CheckBox ResponderFingerprintCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_responder_fingerprint);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (ResponderFingerprintCheckbox.isChecked()) {
                        M_Responder_Fingerprint = " --fingerprint";
                        addToCmd(M_Responder_Fingerprint);
                    } else {
                        removeFromCmd(M_Responder_Fingerprint);
                    }
                }
            };
            ResponderFingerprintCheckbox.setOnClickListener(checkBoxListener);

            // Checkbox for Provider Downgrade
            final CheckBox ResponderDowngradeCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_responder_LM);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (ResponderDowngradeCheckbox.isChecked()) {
                        M_Responder_Downgrade = " --lm";
                        addToCmd(M_Responder_Downgrade);
                    } else {
                        removeFromCmd(M_Responder_Downgrade);
                    }
                }
            };
            ResponderDowngradeCheckbox.setOnClickListener(checkBoxListener);

            // Checkbox for NBTNS
            final CheckBox ResponderNBTNSCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_responder_NBTNS);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (ResponderNBTNSCheckbox.isChecked()) {
                        M_Responder_NBTNS = " --nbtns";
                        addToCmd(M_Responder_NBTNS);
                    } else {
                        removeFromCmd(M_Responder_NBTNS);
                    }
                }
            };
            ResponderNBTNSCheckbox.setOnClickListener(checkBoxListener);

            // Checkbox for WAPD
            final CheckBox ResponderWPADCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_responder_WPAD);
            ResponderWPADCheckbox.setOnCheckedChangeListener(
                    new ManaClickListener(" --wpad"));

            // Checkbox for Provider WREDIR
            final CheckBox responderWRedirCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_responder_WREDIR);
            responderWRedirCheckbox.setOnCheckedChangeListener(new ManaClickListener(" --wredir"));

            // Checkbox for Provider
            final CheckBox ResponderCheckbox = (CheckBox) rootView.findViewById(R.id.mitmf_responder);
            checkBoxListener = new View.OnClickListener() {
                public void onClick(View v) {
                    if (ResponderCheckbox.isChecked()) {
                        M_Responder = " --responder";
                        addToCmd(M_Responder);
                        /* Allow checkboxes to be enabled if Provider not activated */
                        ResponderAnalyzeCheckbox.setEnabled(true);
                        ResponderFingerprintCheckbox.setEnabled(true);
                        ResponderDowngradeCheckbox.setEnabled(true);
                        ResponderNBTNSCheckbox.setEnabled(true);
                        ResponderWPADCheckbox.setEnabled(true);
                        responderWRedirCheckbox.setEnabled(true);
                    }else{
                        removeFromCmd(M_Responder);
                        removeFromCmd(M_Responder_Analyze);
                        removeFromCmd(M_Responder_Fingerprint);
                        removeFromCmd(M_Responder_Downgrade);
                        removeFromCmd(M_Responder_NBTNS);
                        removeFromCmd(M_Responder_WPAD);
                        removeFromCmd(M_Responder_WRedir);

                        /* Uncheck all responder checkboxes */
                        ResponderAnalyzeCheckbox.setChecked(false);
                        ResponderFingerprintCheckbox.setChecked(false);
                        ResponderDowngradeCheckbox.setChecked(false);
                        ResponderNBTNSCheckbox.setChecked(false);
                        ResponderWPADCheckbox.setChecked(false);
                        responderWRedirCheckbox.setChecked(false);

                        /* Don't allow checkboxes to be enabled if Provider not activated */
                        ResponderAnalyzeCheckbox.setEnabled(false);
                        ResponderFingerprintCheckbox.setEnabled(false);
                        ResponderDowngradeCheckbox.setEnabled(false);
                        ResponderNBTNSCheckbox.setEnabled(false);
                        ResponderWPADCheckbox.setEnabled(false);
                        responderWRedirCheckbox.setEnabled(false);                    }
                }
            };
            ResponderCheckbox.setOnClickListener(checkBoxListener);

            /* Set default responder options to not activated */
            ResponderAnalyzeCheckbox.setEnabled(false);
            ResponderFingerprintCheckbox.setEnabled(false);
            ResponderDowngradeCheckbox.setEnabled(false);
            ResponderNBTNSCheckbox.setEnabled(false);
            ResponderWPADCheckbox.setEnabled(false);
            responderWRedirCheckbox.setEnabled(false);


            return rootView;
=======
            return responderBinding.getRoot();
>>>>>>> wardriving-map
        }

        @Override
        public void getCommands(StringBuilder stringBuilder) {
            if (responderBinding.mitmfResponder.isChecked()) {
                stringBuilder.append(" --responder")
                        .append(responderBinding.mitmfResponderAnalyze.isChecked() ? " --analyze" : "")
                        .append(responderBinding.mitmfResponderFingerprint.isChecked() ?
                                " --fingerprint" : "")
                        .append(responderBinding.mitmfResponderLM.isChecked() ? " --lm" : "")
                        .append(responderBinding.mitmfResponderNBTNS.isChecked() ? " --nbtns" : "")
                        .append(responderBinding.mitmfResponderWPAD.isChecked() ? " --wpad" : "")
                        .append(responderBinding.mitmfResponderWREDIR.isChecked() ? " --wredir" : "")
                ;
            }
        }
    }

    public static class MITMfConfigFragment extends Fragment {

        private final String configFilePath = nh.CHROOT_PATH + "/etc/mitmf/mitmf.conf";
        final ShellExecuter exe = new ShellExecuter();

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            final View rootView = inflater.inflate(R.layout.source_short, container, false);

            String description = getResources().getString(R.string.mitmf_config);
            TextView desc = (TextView) rootView.findViewById(R.id.description);
            desc.setText(description);


            EditText source = (EditText) rootView.findViewById(R.id.source);
            exe.ReadFile_ASYNC(configFilePath, source);
            Button button = (Button) rootView.findViewById(R.id.update);
            button.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    EditText source = (EditText) rootView.findViewById(R.id.source);
                    Boolean isSaved = exe.SaveFileContents(source.getText().toString(), configFilePath);
                    if (isSaved) {
                        nh.showMessage("Source updated");
                    } else {
                        nh.showMessage("Source not updated");
                    }
                }
            });
            return rootView;
        }
    }

<<<<<<< HEAD
    private String getCmd(){
        StringBuilder builder = new StringBuilder();
        for (int j = commandComposed.size()-1; j >= 0; j--) {
            builder.append(commandComposed.get(j));
        }
        Log.d("MITMF CMD OUTPUT: ", "mitmf " + builder.toString());
        return builder.toString();
    }

=======
>>>>>>> wardriving-map
    private static void cleanCmd() {
        for (int j = commandComposed.size()-1; j >= 0; j--) {
                commandComposed.remove(j);
        }
    }

<<<<<<< HEAD
    private static void addToCmd(String opt) {
        commandComposed.add(opt);
    }

    private static void removeFromCmd(String opt) {
        for (int j = commandComposed.size()-1; j >= 0; j--) {
            if(commandComposed.get(j).equals(opt))
                commandComposed.remove(j);
        }
    }
=======
>>>>>>> wardriving-map

    private void intentClickListener_NH(final String command) {
        try {
            Intent intent =
                    new Intent("com.offsec.nhterm.RUN_SCRIPT_NH");
            intent.addCategory(Intent.CATEGORY_DEFAULT);

            intent.putExtra("com.offsec.nhterm.iInitialCommand", command);
            startActivity(intent);
        } catch (Exception e) {
            Toast.makeText(getActivity().getApplicationContext(), getString(R.string.toast_install_terminal), Toast.LENGTH_SHORT).show();
        }
    }
}
